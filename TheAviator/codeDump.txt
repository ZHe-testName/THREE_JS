<!-- <!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		<title>The Aviator: The Game | Codrops</title>
		<meta name="description" content="Demo of the game: The Making of 'The Aviator': Animating a Basic 3D Scene with Three.js" />
		<meta name="keywords" content="three.js, webgl, tutorial, game, 3d, animation, airplane, web development, javascript" />
		<meta name="author" content="Karim Maaloul for Codrops" />
		<link rel="shortcut icon" href="favicon.ico">
		<link href='https://fonts.googleapis.com/css?family=Playfair+Display:400,700,700italic' rel='stylesheet' type='text/css'>
		<!-- <link rel="stylesheet" type="text/css" href="css/demo.css" /> -->
		<!-- <link rel="stylesheet" type="text/css" href="css/game.css" />
		<script src="./js/lib/dat.gui.js"></script>
		<script type="text/javascript" src="js/lib/three.min.js"></script>
		<script type="text/javascript" src="js/lib/TweenMax.min.js"></script> -->
		
		<!--[if IE]>
		  <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
		<![endif]-->
	<!-- </head>
	<body>
		<canvas class="world" id="world"></canvas> --> -->
		<!-- <div class="game-holder" id="gameHolder">
			<div class="header">
				<h1><span>the</span>Aviator</h1>
				<h2>fly it to the end</h2>
				<div class="score" id="score">
					<div class="score__content" id="level">
						<div class="score__label">level</div>
						<div class="score__value score__value--level" id="levelValue">1</div>
						<svg class="level-circle" id="levelCircle" viewbox="0 0 200 200">
							<circle id="levelCircleBgr" r="80" cx="100" cy="100" fill="none" stroke="#d1b790" stroke-width="24px" />
							<circle id="levelCircleStroke" r="80" cx="100" cy="100" fill="none" #f25346 stroke="#68c3c0" stroke-width="14px" stroke-dasharray="502" />
						</svg>
					</div>
					<div class="score__content" id="dist">
						<div class="score__label">distance</div>
						<div class="score__value score__value--dist" id="distValue">000</div>
					</div>
					<div class="score__content" id="energy">
						<div class="score__label">energy</div>
						<div class="score__value score__value--energy" id="energyValue">
							<div class="energy-bar" id="energyBar"></div>
						</div>
					</div>
				</div>
			</div>
			
			<div class="message message--replay" id="replayMessage">Click to Replay</div>
			<div class="message message--instructions" id="instructions">Grab the blue pills<span>avoid the red ones</span></div>
		</div>
		<!-- Demo links -->
		<!-- <nav class="meta">
			<a class="codrops-icon codrops-icon--prev" href="http://tympanus.net/Development/Interactive3DMallMap/" title="Previous Demo"><span>Previous Demo</span></a>
			<a class="codrops-icon codrops-icon--drop" href="http://tympanus.net/codrops/?p=26501" title="Back to the article"><span>Back to the Codrops article</span></a>
			<a class="demo-link" href="part1.html">Part 1</a>
			<a class="demo-link" href="part2.html">Part 2</a>
		</nav> --> -->

		<!-- <script type="text/javascript" src="js/game.js"></script>
	</body>
</html> -->


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    const width = window.innerWidth,
        height = window.innerHeight,
        canvas = document.getElementById('canvas');

    canvas.setAttribute('width', width);
    canvas.setAttribute('height', height);

    const ball = {
        rotationX: 0,
        rotationY: 0,
        rotationZ: 0,
        positionX: 0,
        positionY: 0,
        positionZ: 0,
    };

    const gui = new dat.gui.GUI();
    gui.add(ball, 'rotationX').min(-0.2).max(0.2).step(0.001);
    gui.add(ball, 'rotationY').min(-0.2).max(0.2).step(0.001);
    gui.add(ball, 'rotationZ').min(-0.2).max(0.2).step(0.001);

    gui.add(ball, 'positionX').min(-5).max(5).step(0.1);
    gui.add(ball, 'positionY').min(-5).max(5).step(0.1);
    gui.add(ball, 'positionZ').min(-5).max(5).step(0.1);

    const renderer = new THREE.WebGLRenderer({canvas: canvas}); 
    renderer.setClearColor(0x000000);

    const scene = new THREE.Scene();

    const camera = new THREE.PerspectiveCamera(85, width / height, 0.1, 5000);
    camera.position.set(0, 0, 1000);

    const light = new THREE.AmbientLight(0xffffff);
    scene.add(light);

    const geometry = new THREE.SphereGeometry(300, 12, 12);
    const material = new THREE.MeshBasicMaterial({
        color: 0x00ff00,
        vertexColors: THREE.FaceColors,
    });

    for (let i = 0; i < geometry.faces.length; i++){
        geometry.faces[i].color.setRGB(Math.random(), Math.random(), Math.random());
    };

    const mesh = new THREE.Mesh(geometry, material);

    scene.add(mesh);

    renderer.render(scene, camera);

    function loop(){
        mesh.rotation.x += ball.rotationX;
        mesh.rotation.y += ball.rotationY;
        mesh.rotation.z += ball.rotationZ;

        mesh.position.x += ball.positionX;
        mesh.position.y += ball.positionY;
        mesh.position.z += ball.positionZ;

        renderer.render(scene, camera);

        requestAnimationFrame(function(){loop()});
    }

    loop();

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function hendleWindowResize(){
    // update height and width of the renderer and the camera
    height = window.innerHeight;
    width = window.innerWidth;

    renderer.setSize(width, height);
    camera.aspect = width / height;
    camera.updateProjectionMatrix();
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////